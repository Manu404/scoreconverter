using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Linq;

namespace ScoreConverter
{
    public class ConversionJob
    {
        private readonly string[] _desiredOutput = { "png", "spos", "mpos", "svg", "ogg", "metajson" };
        private string _binPath { get; }
        private IConsole _console { get; }

        private string _jsonJobFilePath { get; set; }
        private string _workingDir { get; }
        private string _destination { get; }
        private List<ConversionJobFile> _files { get; }

        public ConversionJob(string binPath, IEnumerable<string> files, string destination, IConsole console)
        {
            _binPath = binPath;
            _console = console;
            _workingDir = Path.Combine(Path.GetTempPath(), $"job_{DateTimeOffset.UtcNow.ToUnixTimeSeconds()}");
            _jsonJobFilePath = Path.Combine(_workingDir, $"{Path.GetDirectoryName(_workingDir)}.json");

            _destination = destination;
            _files = new List<ConversionJobFile>();
            BuildFileList(files);            
        }

        private void BuildFileList(IEnumerable<string> files)
        {            
            foreach (var source in files)
            {
                if (File.Exists(source))
                    _files.Add(new ConversionJobFile()
                    {
                        Name = Path.GetFileName(source),
                        NameWithoutExtension = Path.GetFileNameWithoutExtension(source),
                        FullPath = Path.GetFullPath(source),
                        Task = new List<ConversionJobTask>()
                    });
            }
        }
        public void Do()
        {
            CreateTempWorkingDir();
            PrepareJsonJobFile();
            WriteJsonJob();
            if (ExecuteJob() && EnsureJobDone())
            {
                CreateArchives();
            }
            Clean();
        }

        private void CreateTempWorkingDir()
        {
            if (Directory.Exists(_workingDir))
                Directory.Delete(_workingDir, true);
            else
                Directory.CreateDirectory(_workingDir);
        }

        private void Clean()
        {
            if(File.Exists(_jsonJobFilePath))
                File.Delete(_jsonJobFilePath);
            foreach (var file in _files)
                if(File.Exists(file.WorkingDir))
                Directory.Delete(file.WorkingDir, true);
            _console.WriteLine("We cleaned everything.");
        }

        private void CreateArchives()
        {
            _console.WriteLine("Your files will now be packed in zip by the elves, it's a fine art...");
            foreach (var file in _files)
            {
                string zipPath = Path.Combine(this._destination, Path.GetFileName(Path.ChangeExtension(file.FullPath, ".zip")));
                if (File.Exists(zipPath)) File.Delete(zipPath);
                ZipFile.CreateFromDirectory(file.WorkingDir, zipPath);
            }
            _console.WriteLine("They did it !");
        }

        private bool ExecuteJob()
        {
            if(!File.Exists(_binPath))
            {
                _console.WriteLine("We couldn't find the goblin team :( Make sure Musescore is installed and/org you provided a valid path to the binary file");
                return false;
            }
            ProcessStartInfo startInfo = new ProcessStartInfo(_binPath);
            startInfo.Arguments = $"-j {_jsonJobFilePath}";
            var p = Process.Start(startInfo);
            _console.WriteLine("Your files had been sent to the goblins team, they're doing their best...");
            int i = 0;
            while (!p.HasExited)
            {
                System.Threading.Thread.Sleep(1000); // fine, as waiting for external process
                _console.Write(".");
                i++;
            }
            _console.WriteLine($"\n{i} goblins died...");
            return true;
        }

        private bool EnsureJobDone()
        {
            string missingOutput = String.Empty;
            foreach(var file in this._files)
            {
                foreach(var task in file.Task)
                {
                    if (!File.Exists(task.Out))
                        missingOutput += task.Out + '\n';
                }
            }
            if(String.IsNullOrEmpty(missingOutput))
            {
                _console.WriteLine("The following files couldn't be generated by the goblins team: ");
                _console.WriteLine(missingOutput);
                _console.WriteLine("Please fix your job request.");
                return false;
            }
            return true;
        }


        private void WriteJsonJob()
        {
            var tasks = _files.SelectMany(f => f.Task);
            string json = JsonConvert.SerializeObject(tasks);
            System.IO.File.WriteAllText(_jsonJobFilePath, json);
        }

        private void PrepareJsonJobFile()
        {
            _files.ForEach((f) => PrepareSingleFileForJob(f));
        }

        private void PrepareSingleFileForJob(ConversionJobFile file)
        {
            file.WorkingDir = Path.Combine(Path.GetDirectoryName(file.FullPath), file.NameWithoutExtension);
            Directory.CreateDirectory(file.WorkingDir);

            foreach (var extension in _desiredOutput)
            {
                var output = Path.Combine(file.WorkingDir, Path.ChangeExtension(file.Name, extension));
                file.Task.Add(new ConversionJobTask()
                {
                    In = file.FullPath,
                    Out = output
                });                
            }
        }
    }
}
